[core]
    editor = nvim
    filemode = false
    excludesfile = ~/.gitignore_global
    ; pager = delta --$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo dark || echo light)
    pager = delta; --light

[delta]
    features = line-numbers
    navigate = true

[interactive]
    ; diffFilter = delta --color-only --$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo dark || echo light)
    diffFilter = delta; --light

[alias]
    che = checkout
    che-dev = checkout develop
    stat = status --short --branch
    latesttag = describe --abbrev=0 --tags
    branches = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

    logg = log --abbrev-commit --decorate --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
    loggg = logg --graph

    ; Пример использования: git squash N
    squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"

    ; Переменная MERGE_TARGET содержит имя ветки для слияния
    mr-log = !"git log HEAD...$MERGE_TARGET"
    mr-rlog = !"git mr-log --reverse | awk '/commit/{printf \"\\n\"; printf substr($2, 0, 8)}/    [A-ZА-Я]/{printf substr($0, 4)}'"
    mr-author = !"git show -s --format='%an <%ae>' $(git mr-log --reverse | head -1 | awk '{print $2}')"
    mr-squash = !"COMMIT=$(git mr-rlog) && AUTHOR=$(git mr-author) && git reset --soft $(git merge-base $MERGE_TARGET HEAD) && git commit --edit --author=\"$AUTHOR\" --message=\".\n\n$COMMIT\""
    mr-files = !cd -- ${GIT_PREFIX:-.} && git diff --merge-base --relative --name-only \"$MERGE_TARGET\"
    mr-stat = !cd -- ${GIT_PREFIX:-.} && git diff --merge-base --relative --stat \"$MERGE_TARGET\"
    mr-review = !nvim -p $(git mr-files) +\"let g:gitgutter_diff_base = '$(git merge-base \"$MERGE_TARGET\" HEAD)'\" +\"tabdo Gdiffsplit $(git merge-base \"$MERGE_TARGET\" HEAD)\"

    re = rebase
    re-develop = rebase -i develop
    re-feature = !git rebase -i $(git merge-base \"$MERGE_TARGET\" HEAD)
    re-continue = rebase --continue

[merge]
    tool = nvim-fugitive
    conflictstyle = diff3

[mergetool]
    prompt = true
    keepBackup = false
[mergetool "nvim"]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[mergetool "nvim-fugitive"]
    cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"
[mergetool "vim-fugitive"]
    cmd = vim -f -c \"Gdiffsplit!\" \"$MERGED\"

[diff]
    tool = nvim-fugitive

[difftool]
    prompt = false

[pull]
    rebase = true
