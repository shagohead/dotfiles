; git config --global include.path ~/.gitconfig.base

[core]
    excludesfile = ~/.gitignore_global
    filemode = false

    ; Внешние инструменты.
    editor = nvim; https://neovim.io
    pager = delta; https://dandavison.github.io/delta/

[init]
    defaultBranch = master

[pull]
    rebase = true

[interactive]
    diffFilter = delta --color-only

[diff]
    tool = nvim-fugitive
    guitool = kitty.gui
    colorMoved = default

[difftool]
    prompt = true
    trustExitCode = true

[merge]
    tool = nvim-fugitive
    conflictstyle = diff3

[difftool "kitty"]
    cmd = kitty +kitten diff $LOCAL $REMOTE

[difftool "kitty.gui"]
    cmd = kitty kitty +kitten diff $LOCAL $REMOTE

[mergetool]
    prompt = true
    keepBackup = false

[mergetool "nvim"]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[mergetool "nvim-fugitive"]
    cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"

[mergetool "vim-fugitive"]
    cmd = vim -f -c \"Gdiffsplit!\" \"$MERGED\"

[delta]
    features = line-numbers
    navigate = true

    ; Оформление диффа, использующее цвета из палитры ANSI,
    ; для независимости от используемой цветовой схемы.
    line-numbers-minus-style = red
    line-numbers-plus-style = green
    minus-style = syntax 52
    minus-emph-style = syntax 88 bold
    plus-style = syntax 22
    plus-emph-style = syntax 28 bold

[tig "color"]
    cursor = 15 19
    title-focus = white 18 bold
    title-blur = white 18 dim

[alias]
    che = checkout

    ; Шорткаты для форматированного вывода.
    branches = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

    logg = log --abbrev-commit --decorate --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
    loggg = logg --graph

    ; Шорткат для merge-base
    mb = merge-base HEAD

    ; Шорткат для <ref> основанного на merge-base
    mref = !"f() { echo $(git merge-base HEAD $1)..HEAD; }; f"

    ; Реверсивный log для добавления его в commit message.
    ; Принимает позиционным аргументом ref. log будет строиться от merge-base этого ref и HEAD.
    ; Таким образом можно получить коммиты, которые были сделаны в текущей ветке относительно ref.
    rlog = !"f() { git log $(git merge-base HEAD $1)..HEAD --reverse | awk '/commit/{printf \"\\n\"; printf substr($2, 0, 8)}/    [A-ZА-Я]/{printf substr($0, 4)}'; }; f"

    ; Автор первого коммита в текущей ветке относительно $1.
    author = !"f() { git show -s --format='%an <%ae>' $(git log $(git merge-base HEAD $1)..HEAD --reverse | head -1 | awk '{print $2}'); }; f"

    ; Объединение коммитов ветки, сделанных после merge-base от HEAD и $1.
    squash = !"f() { COMMIT=$(git rlog $1) && AUTHOR=$(git author $1) && git reset --soft $(git merge-base HEAD $1) && git commit --edit --author=\"$AUTHOR\" --message=\".\n\n$COMMIT\"; }; f"

    ; diff относительно текущей директории, сравнивающий HEAD с merge-base от HEAD и $1. Примеры:
    ; git mdiff develop --stat (статистика по изменениям файлов в этой директории относительно develop)
    ; git mdiff develop --name-only (тоже самое, но только список файлов, который можно передать куда-нибудь)
    mdiff = !"f() { cd -- ${GIT_PREFIX:-.} && git diff --merge-base --relative ${@:1}; }; f"

    ; Запускает редактор с табами измененных файлов и переменной окружения, указывающей на merge-base.
    review = !"f() { DIFF_BASE=$(git merge-base HEAD $1) nvim $(git mdiff $1 --name-only) ${@:1}; }; f"
